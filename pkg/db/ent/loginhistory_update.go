// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/login-gateway/pkg/db/ent/loginhistory"
	"github.com/NpoolPlatform/login-gateway/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// LoginHistoryUpdate is the builder for updating LoginHistory entities.
type LoginHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *LoginHistoryMutation
}

// Where appends a list predicates to the LoginHistoryUpdate builder.
func (lhu *LoginHistoryUpdate) Where(ps ...predicate.LoginHistory) *LoginHistoryUpdate {
	lhu.mutation.Where(ps...)
	return lhu
}

// SetAppID sets the "app_id" field.
func (lhu *LoginHistoryUpdate) SetAppID(u uuid.UUID) *LoginHistoryUpdate {
	lhu.mutation.SetAppID(u)
	return lhu
}

// SetUserID sets the "user_id" field.
func (lhu *LoginHistoryUpdate) SetUserID(u uuid.UUID) *LoginHistoryUpdate {
	lhu.mutation.SetUserID(u)
	return lhu
}

// SetClientIP sets the "client_ip" field.
func (lhu *LoginHistoryUpdate) SetClientIP(s string) *LoginHistoryUpdate {
	lhu.mutation.SetClientIP(s)
	return lhu
}

// SetUserAgent sets the "user_agent" field.
func (lhu *LoginHistoryUpdate) SetUserAgent(s string) *LoginHistoryUpdate {
	lhu.mutation.SetUserAgent(s)
	return lhu
}

// SetCreateAt sets the "create_at" field.
func (lhu *LoginHistoryUpdate) SetCreateAt(u uint32) *LoginHistoryUpdate {
	lhu.mutation.ResetCreateAt()
	lhu.mutation.SetCreateAt(u)
	return lhu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (lhu *LoginHistoryUpdate) SetNillableCreateAt(u *uint32) *LoginHistoryUpdate {
	if u != nil {
		lhu.SetCreateAt(*u)
	}
	return lhu
}

// AddCreateAt adds u to the "create_at" field.
func (lhu *LoginHistoryUpdate) AddCreateAt(u int32) *LoginHistoryUpdate {
	lhu.mutation.AddCreateAt(u)
	return lhu
}

// Mutation returns the LoginHistoryMutation object of the builder.
func (lhu *LoginHistoryUpdate) Mutation() *LoginHistoryMutation {
	return lhu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lhu *LoginHistoryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(lhu.hooks) == 0 {
		affected, err = lhu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LoginHistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			lhu.mutation = mutation
			affected, err = lhu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(lhu.hooks) - 1; i >= 0; i-- {
			if lhu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lhu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lhu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (lhu *LoginHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := lhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lhu *LoginHistoryUpdate) Exec(ctx context.Context) error {
	_, err := lhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lhu *LoginHistoryUpdate) ExecX(ctx context.Context) {
	if err := lhu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lhu *LoginHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   loginhistory.Table,
			Columns: loginhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: loginhistory.FieldID,
			},
		},
	}
	if ps := lhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lhu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: loginhistory.FieldAppID,
		})
	}
	if value, ok := lhu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: loginhistory.FieldUserID,
		})
	}
	if value, ok := lhu.mutation.ClientIP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loginhistory.FieldClientIP,
		})
	}
	if value, ok := lhu.mutation.UserAgent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loginhistory.FieldUserAgent,
		})
	}
	if value, ok := lhu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: loginhistory.FieldCreateAt,
		})
	}
	if value, ok := lhu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: loginhistory.FieldCreateAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loginhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// LoginHistoryUpdateOne is the builder for updating a single LoginHistory entity.
type LoginHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LoginHistoryMutation
}

// SetAppID sets the "app_id" field.
func (lhuo *LoginHistoryUpdateOne) SetAppID(u uuid.UUID) *LoginHistoryUpdateOne {
	lhuo.mutation.SetAppID(u)
	return lhuo
}

// SetUserID sets the "user_id" field.
func (lhuo *LoginHistoryUpdateOne) SetUserID(u uuid.UUID) *LoginHistoryUpdateOne {
	lhuo.mutation.SetUserID(u)
	return lhuo
}

// SetClientIP sets the "client_ip" field.
func (lhuo *LoginHistoryUpdateOne) SetClientIP(s string) *LoginHistoryUpdateOne {
	lhuo.mutation.SetClientIP(s)
	return lhuo
}

// SetUserAgent sets the "user_agent" field.
func (lhuo *LoginHistoryUpdateOne) SetUserAgent(s string) *LoginHistoryUpdateOne {
	lhuo.mutation.SetUserAgent(s)
	return lhuo
}

// SetCreateAt sets the "create_at" field.
func (lhuo *LoginHistoryUpdateOne) SetCreateAt(u uint32) *LoginHistoryUpdateOne {
	lhuo.mutation.ResetCreateAt()
	lhuo.mutation.SetCreateAt(u)
	return lhuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (lhuo *LoginHistoryUpdateOne) SetNillableCreateAt(u *uint32) *LoginHistoryUpdateOne {
	if u != nil {
		lhuo.SetCreateAt(*u)
	}
	return lhuo
}

// AddCreateAt adds u to the "create_at" field.
func (lhuo *LoginHistoryUpdateOne) AddCreateAt(u int32) *LoginHistoryUpdateOne {
	lhuo.mutation.AddCreateAt(u)
	return lhuo
}

// Mutation returns the LoginHistoryMutation object of the builder.
func (lhuo *LoginHistoryUpdateOne) Mutation() *LoginHistoryMutation {
	return lhuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lhuo *LoginHistoryUpdateOne) Select(field string, fields ...string) *LoginHistoryUpdateOne {
	lhuo.fields = append([]string{field}, fields...)
	return lhuo
}

// Save executes the query and returns the updated LoginHistory entity.
func (lhuo *LoginHistoryUpdateOne) Save(ctx context.Context) (*LoginHistory, error) {
	var (
		err  error
		node *LoginHistory
	)
	if len(lhuo.hooks) == 0 {
		node, err = lhuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LoginHistoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			lhuo.mutation = mutation
			node, err = lhuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(lhuo.hooks) - 1; i >= 0; i-- {
			if lhuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lhuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lhuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (lhuo *LoginHistoryUpdateOne) SaveX(ctx context.Context) *LoginHistory {
	node, err := lhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lhuo *LoginHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := lhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lhuo *LoginHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := lhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lhuo *LoginHistoryUpdateOne) sqlSave(ctx context.Context) (_node *LoginHistory, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   loginhistory.Table,
			Columns: loginhistory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: loginhistory.FieldID,
			},
		},
	}
	id, ok := lhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LoginHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, loginhistory.FieldID)
		for _, f := range fields {
			if !loginhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != loginhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lhuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: loginhistory.FieldAppID,
		})
	}
	if value, ok := lhuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: loginhistory.FieldUserID,
		})
	}
	if value, ok := lhuo.mutation.ClientIP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loginhistory.FieldClientIP,
		})
	}
	if value, ok := lhuo.mutation.UserAgent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loginhistory.FieldUserAgent,
		})
	}
	if value, ok := lhuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: loginhistory.FieldCreateAt,
		})
	}
	if value, ok := lhuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: loginhistory.FieldCreateAt,
		})
	}
	_node = &LoginHistory{config: lhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loginhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
